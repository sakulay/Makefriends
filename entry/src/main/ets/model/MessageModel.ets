import { Client } from "@ohos/stompjs";
import { webSocket } from "@kit.NetworkKit";
import { BusinessError } from "@kit.BasicServicesKit";
import { MessageBase, TextDetailData } from "./Message";
import { dealImageResMsg } from "../utils/MessageUtils";
import { HttpConstant } from "../common/HttpConstant";
import { AuthenticationToken } from "../viewmodel/AuthModel";


let messageList = new TextDetailData()
const url: string = `ws://${HttpConstant.DOMIN}:8989/ws`
// const token: string = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdHVkZW50SWQiOiIxOSIsInN1YiI6IjE5IiwiZGF0YVNjb3BlIjowLCJleHAiOjE3NDUwMzg0MjYsImlhdCI6MTc0NTAzMTIyNiwiYXV0aG9yaXRpZXMiOlsiUk9MRV9TVFVERU5UIl0sImp0aSI6Ijc5OGJkNGY4NmViMjQyOWE4MDMxZjFjYzkzMTY3NDFmIn0.SEBeDf5n59w9vsbRGZwq2t21tFB4o2Dr4lIiySWeYYY'
const ws = webSocket.createWebSocket()
const LOG = '[MessageModel]'

export class MessageModel {
  type: string;
  sender: string
  content: string;

  constructor(type: string, sender: string, content: string) {
    this.type = type;
    this.sender = sender;
    this.content = content;
  }
}
export enum MessageType {
  CHAT = "CHAT",
  UNREAD = "UNREAD"
}
export class Unread{
  sender: string;
  avatar: string;
  nickname: string;
  latestContent: string;
  unreadCount: string;
  constructor(sender: string, avatar: string, nickname: string, latestContent: string, unreadCount: string) {
    this.sender = sender;
    this.avatar = avatar;
    this.nickname = nickname;
    this.latestContent = latestContent;
    this.unreadCount = unreadCount;
  }
}

export function getUnreadList(): Array<Unread> {
  let list: Array<Unread> = []
  // list.push(new Unread("19", "http://111.230.102.82:40061/i/2025/02/26/p1mi5m-0.jpg", "mike", "‰Ω†Â•Ω", '1'))
  // list.push(new Unread("11", "http://111.230.102.82:40061/i/2025/02/26/p1mi5m-0.jpg", "anson", "‰Ω†Â•Ω1", '1'))
  // list.push(new Unread("2101510218", "http://111.230.102.82:40061/i/2025/02/26/p1mi5m-0.jpg", "yuyu", "‰Ω†Â•Ω2", '1'))
  // list.push(new Unread("4689", "http://111.230.102.82:40061/i/2025/02/26/p1mi5m-0.jpg", "ljc", "‰Ω†Â•Ω33333333", '1'))
  return list;
}
// Êú™ËØªÊ∂àÊÅØÂàóË°®
let unreadList: Array<Unread> = getUnreadList();

export function initMessage() {
  // ÂÖ®Â±ÄËÆæÁΩÆÊú™ËØªÊ∂àÊÅØÂàóË°®
  AppStorage.setOrCreate("unread", unreadList)
  // ÂÖ®Â±ÄËÆæÁΩÆÊ∂àÊÅØÂàóË°®
  AppStorage.setOrCreate("message", messageList)
  // ÂÖ®Â±ÄËÆæÁΩÆÂ∑≤ÈÄâËÅäÂ§©‰ºöËØù
  AppStorage.setOrCreate("selectedChat", '')
  // ÂÖ®Â±ÄËÆæÁΩÆws
  AppStorage.setOrCreate("ws", ws)
  connect()
}
export function connect() {

  ws.on('open', (err: BusinessError, value: Object) => {
    if (err) {
      console.log("‚ùå ËøûÊé•Â§±Ë¥•. Err:" + err.message);
      // this.message = 'ËøûÊé•Â§±Ë¥•: ' + err.message + '\n' + this.message;
      return;
    }
    console.log("‚úÖ WebSocket ËøûÊé•ÊàêÂäü");
    // this.message = 'ËøûÊé•ÊàêÂäü' + '\n' + this.message;
    // ÂèëÈÄÅ STOMP ËøûÊé•ËØ∑Ê±Ç
    const token = (AppStorage.get('auth') as AuthenticationToken).accessToken
    let connectFrame = "CONNECT\naccept-version:1.2\nAuthorization:AppBearer " + token + "\n\n\x00";
    ws.send(connectFrame, (err) => {
      if (err) {
        console.log("‚ùå STOMP ËøûÊé•Â§±Ë¥•:", JSON.stringify(err));
      } else {
        console.log("‚úÖ STOMP ËøûÊé•ËØ∑Ê±ÇÂ∑≤ÂèëÈÄÅ");
      }
    });
  })
  ws.on('close', (err: BusinessError, value: Object) => {
    if (err) {
      console.log("‚ùå WebSocket ÂÖ≥Èó≠ÈîôËØØ:", JSON.stringify(err));
      // this.message = 'Êñ≠ÂºÄËøûÊé•Â§±Ë¥•Ôºö' + err.message +'\n' + this.message;
      return;
    }
    console.log("‚úÖ WebSocket ËøûÊé•Â∑≤ÂÖ≥Èó≠");
    // this.message = 'Êñ≠ÂºÄËøûÊé•' + '\n' + this.message;
  });
  ws.on('error', (err: BusinessError) => {
    console.log(LOG, "on error, error: " + JSON.stringify(err));
  });
  ws.on('message', (err: BusinessError, value: string | ArrayBuffer) => {
    if (err) {
      console.log("‚ùå WebSocket Ê∂àÊÅØÈîôËØØ:", JSON.stringify(err));
      return;
    }
    console.log("üì© Êî∂Âà∞Ê∂àÊÅØ:", value);

    if (typeof value === 'string') {
      if (value.startsWith("CONNECTED")) {
        console.log("‚úÖ STOMP ËøûÊé•ÊàêÂäü");
        // ËÆ¢ÈòÖÊ∂àÊÅØ
        let subscribeFrame1 = "SUBSCRIBE\nid:sub-0\ndestination:/user/queue/greeting\nack:auto\nreceipt:sub-receipt-1\n\n\x00";
        ws.send(subscribeFrame1, (err)=>{subscribeHandle(err)});
        let subscribeFrame2 = "SUBSCRIBE\nid:sub-1\ndestination:/topic/notice\nack:auto\nreceipt:sub-receipt-2\n\n\x00";
        ws.send(subscribeFrame2, (err)=>{subscribeHandle(err)});
        let subscribeFrame3 = "SUBSCRIBE\nid:sub-2\ndestination:/user/queue/unread\nack:auto\nreceipt:sub-receipt-3\n\n\x00";
        ws.send(subscribeFrame3, (err)=>{subscribeHandle(err)});

      } else if (value.startsWith("RECEIPT")) {
        console.log("‚úÖ ËÆ¢ÈòÖÊàêÂäüÔºÅ");
      } else {
        let lines = value.split("\n");  // ÊåâË°åÊãÜÂàÜ
        let lastLine = lines[lines.length - 1];  // Ëé∑ÂèñÊúÄÂêé‰∏ÄË°å
        let message = JSON.parse(lastLine) as MessageModel; // ÊãøÂà∞Ê∂àÊÅØ
        // Â¶ÇÊûúÊòØËÅäÂ§©Ê∂àÊÅØ
        if (message.type === MessageType.CHAT) {
          console.log("üì• Êî∂Âà∞ËÅäÂ§©Ê∂àÊÅØ:", message.content);
          const textDetailData = AppStorage.get('textDetailData') as TextDetailData
          // Â¶ÇÊûúÂºÄÂêØ‰ºöËØùÔºåÂàôÊõ¥Êñ∞ËÅäÂ§©ËÆ∞ÂΩï
          if(textDetailData) {
            const messageBase = new MessageBase(false, '', AppStorage.get('imageOther') as string, AppStorage.get('msgMaxWidth') as number)
            dealImageResMsg(messageBase, message.content)
            textDetailData.pushData(messageBase)
          }
        }
        else if (message.type === MessageType.UNREAD) { // Êú™ËØªÊ∂àÊÅØ
          console.log("üì• Êî∂Âà∞Êú™ËØªÊ∂àÊÅØ:", message.content);
          // Êú™ËØªÊ∂àÊÅØÊòØÁé∞Âú®ËøõË°åÁöÑ‰ºöËØù
          let selectedChat: string | undefined = AppStorage.get('selectedChat')
          if(selectedChat !== '' && selectedChat == message.sender) return
          // Êú™ËØªÊ∂àÊÅØ‰∏çÊòØÁé∞Âú®ËøõË°åÁöÑ‰ºöËØù
          const found = unreadList.find(item => item.sender === message.sender);
          // Êú™ËØªÊ∂àÊÅØÂ≠òÂú®
          if(found) {
            found.unreadCount = message.content.split('@')[0]
            found.latestContent = message.content.split('@')[1]
          } else {
            // Êú™ËØªÊ∂àÊÅØ‰∏çÂ≠òÂú®
            unreadList.push(message2Unread(message))
          }
          AppStorage.set("unread", unreadList)
        }
      }
    }
  });
  ws.connect(url)
}
export function disconnect() {
  if(ws) {
    ws.close()
  }
}

function subscribeHandle(err: BusinessError){
  if (err) {
    console.log("‚ùå ËÆ¢ÈòÖÂ§±Ë¥•:", JSON.stringify(err));
  } else {
    console.log("‚úÖ user/queue/greetingËÆ¢ÈòÖËØ∑Ê±ÇÂ∑≤ÂèëÈÄÅ");
  }
}

function message2Unread(message: MessageModel) {
  let avatar = 'http://111.230.102.82:40061/i/2025/02/26/su2jeq-0.jpeg'
  let nickname = 'Êú™ÂëΩÂêç'
  return new Unread(
    message.sender,
    avatar,
    nickname,
    message.content.split('@')[1],
    message.content.split('@')[0]
  )
}

export function sendChatMessage(toUsername: string, content: string) {
  const user = AppStorage.get('selectedChat') as string
  const sendFrame =
    "SEND\n" +
      `destination:/app/sendToUser/${user}\n` +
      "content-type:application/json\n" +
      "\n" +
      `${JSON.stringify(content)}` + "\x00";

  ws.send(sendFrame, (err) => {
    if (err) {
      console.log("‚ùå Ê∂àÊÅØÂèëÈÄÅÂ§±Ë¥•:", JSON.stringify(err));
    } else {
      console.log("‚úÖ Ê∂àÊÅØÂ∑≤ÂèëÈÄÅ:", content);
    }
  });
}
